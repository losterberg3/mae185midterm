clear all; close all; clc; format long; format compact;

%% Student name, ID number, class_name, and homework_number
names = 'Mayah Carlton, Lars Osterberg, Henry Thai';
class_name = 'MAE185';
homework_number = 'Midterm';

%% Part 1

L = 1e-5; H = 8e-6;
nx = 75; ny = 80;
dx = L/(nx-1); dy = H/(ny-1);
[x,y] = meshgrid(linspace(0,L,nx), linspace(0,H,ny));

% ------------------ Gas constants --------------------------
R = 287; gamma = 1.4; cp = 1005; cv = cp - R; Pr = 0.71;

% ------------------ Freestream conditions ------------------
Tinf = 288.15; pinf = 101300;
rhoinf = pinf/(R*Tinf);
a_inf = sqrt(gamma * R * Tinf);
Minf = 4;
uinf = Minf * a_inf;

% ------------------ Time stepping --------------------------
Nsteps = 1500; dt = 2.35e-11; plot_freq = 50;

% ------------------ Initial conditions ---------------------
rho = rhoinf * ones(ny,nx);
u = uinf * ones(ny,nx);
v = zeros(ny,nx);
T = Tinf * ones(ny,nx);

% Add perturbation to trigger flow development
rho(30:40, 30:40) = rhoinf * 1.01;

U = prim2cons(rho,u,v,T,cv);
res = zeros(1,Nsteps);

% ------------------ Time loop ------------------------------
for step = 1:Nsteps
    % Store old rho for residual
    rho_old = rho;

    % Unpack primitive vars
    [rho,u,v,T,p,e,Et] = cons2prim(U,R,cv);

    % --- predictor step ---
    [Fx,Fy] = compute_fluxes(rho,u,v,T,e,Et,gamma,R,cp,Pr,dx,dy);
    dUdt = -cat(3, ddx_fwd(Fx(:,:,1),dx)+ddy_fwd(Fy(:,:,1),dy), ...
                  ddx_fwd(Fx(:,:,2),dx)+ddy_fwd(Fy(:,:,2),dy), ...
                  ddx_fwd(Fx(:,:,3),dx)+ddy_fwd(Fy(:,:,3),dy), ...
                  ddx_fwd(Fx(:,:,4),dx)+ddy_fwd(Fy(:,:,4),dy));
    U_star = U + dt * dUdt;

    % Predictor to primitive
    [rho_s,u_s,v_s,T_s,p_s,e_s,Et_s] = cons2prim(U_star,R,cv);

    % --- corrector step ---
    [Fx_s,Fy_s] = compute_fluxes(rho_s,u_s,v_s,T_s,e_s,Et_s,gamma,R,cp,Pr,dx,dy);
    dUdt_s = -cat(3, ddx_bwd(Fx_s(:,:,1),dx)+ddy_bwd(Fy_s(:,:,1),dy), ...
                    ddx_bwd(Fx_s(:,:,2),dx)+ddy_bwd(Fy_s(:,:,2),dy), ...
                    ddx_bwd(Fx_s(:,:,3),dx)+ddy_bwd(Fy_s(:,:,3),dy), ...
                    ddx_bwd(Fx_s(:,:,4),dx)+ddy_bwd(Fy_s(:,:,4),dy));
    U = 0.5 * (U + U_star + dt * dUdt_s);

    % Recalculate primitive after corrector
    [rho,u,v,T,p,e,Et] = cons2prim(U,R,cv);

    % --- Apply BCs ---
    % Wall (y=1)
    u(1,:) = 0; v(1,:) = 0; T(1,:) = Tinf; rho(1,:) = rho(2,:);
    % Far-field (y=ny)
    rho(end,:) = rhoinf; u(end,:) = uinf; v(end,:) = 0; T(end,:) = Tinf;
    % Inlet (x=1)
    rho(:,1) = rhoinf; u(:,1) = uinf; v(:,1) = 0; T(:,1) = Tinf;
    % Leading edge (bottom-left)
    u(1,1)=0; v(1,1)=0; T(1,1)=Tinf; rho(1,1)=rho(2,1);
    % Outlet (x=nx)
    rho(:,end) = 2*rho(:,end-1) - rho(:,end-2);
    u(:,end)   = 2*u(:,end-1)   - u(:,end-2);
    v(:,end)   = 2*v(:,end-1)   - v(:,end-2);
    T(:,end)   = 2*T(:,end-1)   - T(:,end-2);

    % Update conservative
    U = prim2cons(rho,u,v,T,cv);
    U = real(U);  % Strip any small imaginary part

    % --- Residual ---
    res(step) = max(abs(rho(:) - rho_old(:)));

    % --- Plot every N steps ---
    if mod(step, plot_freq) == 0 || step == 1
        figure(1); clf;
        vars = {rho, u, v, e, p, T};
        titles = {'\rho','u','v','e','p','T'};
        for k = 1:6
            subplot(2,3,k);
            imagesc(x(1,:), y(:,1), flipud(real(vars{k}))); axis ij equal tight; colorbar;
            title(titles{k});
        end
        sgtitle(sprintf('MacCormack NSE â€“ Step %d/%d', step, Nsteps));
        drawnow;
    end
end

% --- Residual convergence plot ---
figure;
semilogy(res + eps);
xlabel('Time Step'); ylabel('Max |\Delta\rho|'); title('Convergence History'); grid on;


function [Fx,Fy] = compute_fluxes(rho,u,v,T,e,Et,gamma,R,cp,Pr,dx,dy)
    p = rho .* R .* T;
    Fx(:,:,1) = rho .* u;
    Fx(:,:,2) = rho .* u.^2 + p;
    Fx(:,:,3) = rho .* u .* v;
    Fx(:,:,4) = (Et + p ./ rho) .* rho .* u;

    Fy(:,:,1) = rho .* v;
    Fy(:,:,2) = rho .* u .* v;
    Fy(:,:,3) = rho .* v.^2 + p;
    Fy(:,:,4) = (Et + p ./ rho) .* rho .* v;

    mu = sutherland(T);
    dudx = ddx_central(u,dx); dudy = ddy_central(u,dy);
    dvdx = ddx_central(v,dx); dvdy = ddy_central(v,dy);
    tauxx = 2/3*mu.*(2*dudx - dvdy);
    tauyy = 2/3*mu.*(2*dvdy - dudx);
    tauxy = mu.*(dudy + dvdx);

    kappa = cp .* mu ./ Pr;
    dTdx = ddx_central(T,dx); dTdy = ddy_central(T,dy);

    Fx(:,:,2) = Fx(:,:,2) - tauxx;
    Fx(:,:,3) = Fx(:,:,3) - tauxy;
    Fx(:,:,4) = Fx(:,:,4) - (u.*tauxx + v.*tauxy + kappa .* dTdx);

    Fy(:,:,2) = Fy(:,:,2) - tauxy;
    Fy(:,:,3) = Fy(:,:,3) - tauyy;
    Fy(:,:,4) = Fy(:,:,4) - (u.*tauxy + v.*tauyy + kappa .* dTdy);
end


function U = prim2cons(rho,u,v,T,cv)

[nx,ny]=size(u);
e = cv .* T;
Et = rho .* (e + 0.5*(u.^2 + v.^2));
U=zeros(nx,ny,4);

U(:,:,1)=rho;
U(:,:,2)=rho.*u;
U(:,:,3)=rho.*v;
U(:,:,4)=rho.*(e+(u.^2+v.^2)/2);

end

*rest used same functions as in Lars document
